// <auto-generated />
using System;
using Cyra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cyra.Data.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20250922215138_InitialCreateFixedIndexes")]
    partial class InitialCreateFixedIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("New_schema")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cyra.Data.Carrito", b =>
                {
                    b.Property<long>("IdCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdCarrito"));

                    b.Property<string>("EstadoCarrito")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IdCliente")
                        .HasColumnType("bigint");

                    b.HasKey("IdCarrito");

                    b.HasIndex("IdCliente")
                        .HasDatabaseName("idx_carrito_cliente");

                    b.HasIndex("IdCliente", "FechaCreacion")
                        .HasDatabaseName("idx_carrito_activo")
                        .HasFilter("\"EstadoCarrito\" = 'ACTIVO'");

                    b.ToTable("Carrito", "New_schema", t =>
                        {
                            t.HasCheckConstraint("CK_Carrito_EstadoCarrito", "\"EstadoCarrito\" IN ('ACTIVO', 'ABANDONADO', 'FINALIZADO')");
                        });
                });

            modelBuilder.Entity("Cyra.Data.Categoria", b =>
                {
                    b.Property<long>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdCategoria"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categoria", "New_schema");
                });

            modelBuilder.Entity("Cyra.Data.Cliente", b =>
                {
                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint");

                    b.Property<string>("Preferencias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdUsuario");

                    b.ToTable("Cliente", "New_schema");
                });

            modelBuilder.Entity("Cyra.Data.DetalleCarrito", b =>
                {
                    b.Property<long>("IdCarrito")
                        .HasColumnType("bigint");

                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("IdCarrito", "IdProducto");

                    b.HasIndex("IdProducto");

                    b.ToTable("Detalle_carrito", "New_schema", t =>
                        {
                            t.HasCheckConstraint("CK_DetalleCarrito_Cantidad", "\"Cantidad\" > 0");

                            t.HasCheckConstraint("CK_DetalleCarrito_Precio", "\"PrecioUnitario\" >= 0");
                        });
                });

            modelBuilder.Entity("Cyra.Data.DetallePedido", b =>
                {
                    b.Property<long>("IdPedido")
                        .HasColumnType("bigint");

                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("IdPedido", "IdProducto");

                    b.HasIndex("IdPedido")
                        .HasDatabaseName("idx_detallepedido_pedido");

                    b.HasIndex("IdProducto")
                        .HasDatabaseName("idx_detallepedido_producto");

                    b.ToTable("Detalle_pedido", "New_schema", t =>
                        {
                            t.HasCheckConstraint("CK_DetallePedido_Cantidad", "\"Cantidad\" > 0");

                            t.HasCheckConstraint("CK_DetallePedido_Precio", "\"PrecioUnitario\" >= 0");
                        });
                });

            modelBuilder.Entity("Cyra.Data.Envio", b =>
                {
                    b.Property<long>("IdEnvio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdEnvio"));

                    b.Property<string>("DireccionEnvio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EstadoEnvio")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("IdPedido")
                        .HasColumnType("bigint");

                    b.Property<string>("NumeroTelefonoReceptor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("IdEnvio");

                    b.HasIndex("IdPedido")
                        .HasDatabaseName("idx_envio_pedido");

                    b.ToTable("Envio", "New_schema", t =>
                        {
                            t.HasCheckConstraint("CK_Envio_EstadoEnvio", "\"EstadoEnvio\" IN ('PENDIENTE', 'EMPACANDO', 'EN_TRANSITO', 'ENTREGADO', 'CANCELADO')");
                        });
                });

            modelBuilder.Entity("Cyra.Data.ImagenProducto", b =>
                {
                    b.Property<long>("IdImagen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdImagen"));

                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<string>("UrlImagen")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("IdImagen");

                    b.HasIndex("IdProducto")
                        .HasDatabaseName("idx_imagen_producto");

                    b.ToTable("Imagen_producto", "New_schema");
                });

            modelBuilder.Entity("Cyra.Data.Pago", b =>
                {
                    b.Property<long>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdPago"));

                    b.Property<string>("EstadoPago")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IdPedido")
                        .HasColumnType("bigint");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("IdPago");

                    b.HasIndex("IdPedido")
                        .HasDatabaseName("idx_pago_pedido");

                    b.ToTable("Pagos", "New_schema", t =>
                        {
                            t.HasCheckConstraint("CK_Pago_EstadoPago", "\"EstadoPago\" IN ('PENDIENTE', 'PROCESANDO', 'COMPLETADO', 'RECHAZADO', 'REEMBOLSADO')");

                            t.HasCheckConstraint("CK_Pago_Monto", "\"Monto\" >= 0");
                        });
                });

            modelBuilder.Entity("Cyra.Data.Pedido", b =>
                {
                    b.Property<long>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdPedido"));

                    b.Property<string>("EstadoPedido")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IdCliente")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("IdPedido");

                    b.HasIndex("FechaPedido")
                        .HasDatabaseName("idx_pedido_fecha");

                    b.HasIndex("IdCliente")
                        .HasDatabaseName("idx_pedido_cliente");

                    b.ToTable("Pedido", "New_schema", t =>
                        {
                            t.HasCheckConstraint("CK_Pedido_EstadoPedido", "\"EstadoPedido\" IN ('PENDIENTE', 'CONFIRMADO', 'PREPARACION', 'ENVIADO', 'ENTREGADO', 'CANCELADO')");

                            t.HasCheckConstraint("CK_Pedido_Total", "\"Total\" >= 0");
                        });
                });

            modelBuilder.Entity("Cyra.Data.Producto", b =>
                {
                    b.Property<long>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdProducto"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EstadoPublicacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("FechaPublicacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IdVendedor")
                        .HasColumnType("bigint");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("IdProducto");

                    b.HasIndex("EstadoPublicacion")
                        .HasDatabaseName("idx_producto_estado_publicacion");

                    b.HasIndex("FechaPublicacion")
                        .HasDatabaseName("idx_producto_fecha_publicacion");

                    b.HasIndex("IdVendedor")
                        .HasDatabaseName("idx_producto_vendedor");

                    b.ToTable("Producto", "New_schema", t =>
                        {
                            t.HasCheckConstraint("CK_Producto_EstadoPublicacion", "\"EstadoPublicacion\" IN ('BORRADOR', 'ACTIVO', 'PAUSADO', 'AGOTADO', 'ELIMINADO')");

                            t.HasCheckConstraint("CK_Producto_Precio", "\"Precio\" >= 0");

                            t.HasCheckConstraint("CK_Producto_Stock", "\"Stock\" >= 0");
                        });
                });

            modelBuilder.Entity("Cyra.Data.ProductoCategoria", b =>
                {
                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint");

                    b.Property<long>("IdCategoria")
                        .HasColumnType("bigint");

                    b.HasKey("IdProducto", "IdCategoria");

                    b.HasIndex("IdCategoria");

                    b.ToTable("Producto_categoria", "New_schema");
                });

            modelBuilder.Entity("Cyra.Data.Usuario", b =>
                {
                    b.Property<long>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdUsuario"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuario", "New_schema", t =>
                        {
                            t.HasCheckConstraint("CK_Usuario_Estado", "\"Estado\" IN ('ACTIVO', 'INACTIVO', 'SUSPENDIDO')");

                            t.HasCheckConstraint("CK_Usuario_TipoUsuario", "\"TipoUsuario\" IN ('CLIENTE', 'VENDEDOR')");
                        });
                });

            modelBuilder.Entity("Cyra.Data.Vendedor", b =>
                {
                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NombreNegocio")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("NumeroEmpresarial")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("IdUsuario");

                    b.ToTable("Vendedor", "New_schema");
                });

            modelBuilder.Entity("Cyra.Data.Carrito", b =>
                {
                    b.HasOne("Cyra.Data.Cliente", "Cliente")
                        .WithMany("Carritos")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Cyra.Data.Cliente", b =>
                {
                    b.HasOne("Cyra.Data.Usuario", "Usuario")
                        .WithOne("Cliente")
                        .HasForeignKey("Cyra.Data.Cliente", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Cyra.Data.DetalleCarrito", b =>
                {
                    b.HasOne("Cyra.Data.Carrito", "Carrito")
                        .WithMany("Detalles")
                        .HasForeignKey("IdCarrito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cyra.Data.Producto", "Producto")
                        .WithMany("DetallesCarrito")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Cyra.Data.DetallePedido", b =>
                {
                    b.HasOne("Cyra.Data.Pedido", "Pedido")
                        .WithMany("Detalles")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cyra.Data.Producto", "Producto")
                        .WithMany("DetallesPedido")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Cyra.Data.Envio", b =>
                {
                    b.HasOne("Cyra.Data.Pedido", "Pedido")
                        .WithMany("Envios")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Cyra.Data.ImagenProducto", b =>
                {
                    b.HasOne("Cyra.Data.Producto", "Producto")
                        .WithMany("Imagenes")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Cyra.Data.Pago", b =>
                {
                    b.HasOne("Cyra.Data.Pedido", "Pedido")
                        .WithMany("Pagos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Cyra.Data.Pedido", b =>
                {
                    b.HasOne("Cyra.Data.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Cyra.Data.Producto", b =>
                {
                    b.HasOne("Cyra.Data.Vendedor", "Vendedor")
                        .WithMany("Productos")
                        .HasForeignKey("IdVendedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("Cyra.Data.ProductoCategoria", b =>
                {
                    b.HasOne("Cyra.Data.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cyra.Data.Producto", "Producto")
                        .WithMany("Categorias")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Cyra.Data.Vendedor", b =>
                {
                    b.HasOne("Cyra.Data.Usuario", "Usuario")
                        .WithOne("Vendedor")
                        .HasForeignKey("Cyra.Data.Vendedor", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Cyra.Data.Carrito", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("Cyra.Data.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Cyra.Data.Cliente", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Cyra.Data.Pedido", b =>
                {
                    b.Navigation("Detalles");

                    b.Navigation("Envios");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Cyra.Data.Producto", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("DetallesCarrito");

                    b.Navigation("DetallesPedido");

                    b.Navigation("Imagenes");
                });

            modelBuilder.Entity("Cyra.Data.Usuario", b =>
                {
                    b.Navigation("Cliente")
                        .IsRequired();

                    b.Navigation("Vendedor")
                        .IsRequired();
                });

            modelBuilder.Entity("Cyra.Data.Vendedor", b =>
                {
                    b.Navigation("Productos");
                });
#pragma warning restore 612, 618
        }
    }
}
